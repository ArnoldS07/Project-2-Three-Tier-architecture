name: CI/CD Pipeline

on:
  push:
    branches: ["main"]
  workflow_dispatch:
    inputs:
      tag:
        description: Image tag to deploy
        required: true
        default: latest

permissions:
  id-token: write
  contents: read

jobs:

  # 1. Build & Push Images
  docker:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_GITHUB_ROLE_ARN }}
          aws-region: ap-south-1
      - uses: aws-actions/amazon-ecr-login@v2
      - name: Build & Push
        env:
          ECR_FE: 412353802976.dkr.ecr.ap-south-1.amazonaws.com/three-tier-frontend
          ECR_BE: 412353802976.dkr.ecr.ap-south-1.amazonaws.com/three-tier-backend
          COMMIT: ${{ github.sha }}
        run: |
          docker build -t $ECR_FE:latest -t $ECR_FE:$COMMIT ./app/frontend
          docker push $ECR_FE --all-tags
          docker build -t $ECR_BE:latest -t $ECR_BE:$COMMIT ./app/backend
          docker push $ECR_BE --all-tags

  # 2. Terraform Apply
  terraform-apply:
    needs: docker
    runs-on: ubuntu-latest
    environment: prod
    defaults:
      run:
        working-directory: Terraform
    steps:
      - uses: actions/checkout@v4
      - uses: hashicorp/setup-terraform@v3
      - uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_GITHUB_ROLE_ARN }}
          aws-region: ap-south-1
      - name: Terraform Init
        run: terraform init -input=false -backend-config=envs/dev/backend.hcl
      - name: Terraform Apply
        run: terraform apply -auto-approve -input=false -var-file=envs/dev/terraform.tfvars

  # 3. Deploy to EC2 via SSM
  deploy-ec2:
    needs: terraform-apply
    runs-on: ubuntu-latest
    steps:
    - uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: ${{ secrets.AWS_GITHUB_ROLE_ARN }}
        aws-region: ap-south-1

    - name: Rolling update across ASG instances
      env:
        ASG_NAME: three-tier-dev-asg
        TAG: latest
      run: |
        IDS=$(aws autoscaling describe-auto-scaling-groups \
          --auto-scaling-group-names "$ASG_NAME" \
          --query 'AutoScalingGroups[0].Instances[].InstanceId' \
          --output text)

        if [ -z "$IDS" ] || [ "$IDS" = "None" ]; then
          echo "No instances found in ASG $ASG_NAME"
          exit 0
        fi

        for id in $IDS; do
          aws ssm send-command \
            --instance-ids "$id" \
            --document-name "AWS-RunShellScript" \
            --parameters commands="[ 
              \"sudo curl -L 'https://github.com/docker/compose/releases/download/1.23.2/docker-compose-$(uname -s)-$(uname -m)' -o /usr/local/bin/docker-compose\",
              \"sudo chmod +x /usr/local/bin/docker-compose\",
              \"docker-compose --version\",
              \"sed -i 's/:latest/:$TAG/g' /home/ec2-user/docker-compose.yml\",
              \"docker compose -f /home/ec2-user/docker-compose.yml pull\",
              \"docker compose -f /home/ec2-user/docker-compose.yml up -d --remove-orphans\"
            ]" >/dev/null
        done

