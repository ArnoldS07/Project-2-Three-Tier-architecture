name: CI/CD Pipeline

on:
  push:
    branches: ["main"]
    paths:
      - "app/**"
      - "Terraform/**"
  pull_request:
    paths: ["Terraform/**"]
  workflow_dispatch:
    inputs:
      tag:
        description: Image tag to deploy
        required: true
        default: latest

permissions:
  id-token: write
  contents: read

jobs:

  # 1. Build & Push Images
  docker:
    if: github.event_name == 'push' && contains(github.event.head_commit.message, 'app/')
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_GITHUB_ROLE_ARN }}
          aws-region: ap-south-1
      - uses: aws-actions/amazon-ecr-login@v2
      - name: Build & Push
        env:
          ECR_FE: ${{ vars.ECR_REPO_FRONTEND }}
          ECR_BE: ${{ vars.ECR_REPO_BACKEND }}
          COMMIT: ${{ github.sha }}
        run: |
          docker build -t $ECR_FE:latest -t $ECR_FE:$COMMIT ./app/frontend
          docker push $ECR_FE --all-tags
          docker build -t $ECR_BE:latest -t $ECR_BE:$COMMIT ./app/backend
          docker push $ECR_BE --all-tags

  # 2. Terraform CI (Plan)
  terraform-plan:
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: hashicorp/setup-terraform@v3
      - uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_GITHUB_ROLE_ARN }}
          aws-region: ap-south-1
      - name: Fmt/Validate/Plan
        working-directory: Terraform
        run: |
          terraform fmt -check
          terraform init -input=false
          terraform validate
          terraform plan -input=false -var-file=envs/dev/terraform.tfvars -no-color

  # 3. Terraform Apply
  terraform-apply:
    if: github.event_name == 'push' && contains(join(github.event.head_commit.modified, ''), 'Terraform/')
    runs-on: ubuntu-latest
    environment: prod
    defaults:
      run:
        working-directory: Terraform
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
      - name: Configure AWS credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_GITHUB_ROLE_ARN }}
          aws-region: ap-south-1
      - name: Terraform Init
        run: terraform init -input=false -backend-config=envs/dev/backend.hcl
      - name: Terraform Apply
        run: terraform apply -auto-approve -input=false -var-file=envs/dev/terraform.tfvars

  # 4. Deploy to EC2 via SSM
  deploy-ec2:
    if: github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    steps:
      - uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_GITHUB_ROLE_ARN }}
          aws-region: ap-south-1
      - name: Rolling update across ASG instances
        env:
          ASG_NAME: ${{ vars.ASG_NAME }}
          TAG: ${{ github.event.inputs.tag }}
        run: |
          IDS=$(aws autoscaling describe-auto-scaling-groups \
            --auto-scaling-group-names "$ASG_NAME" \
            --query 'AutoScalingGroups[0].Instances[].InstanceId' \
            --output text)
          for id in $IDS; do
            aws ssm send-command \
              --instance-ids "$id" \
              --document-name "AWS-RunShellScript" \
              --parameters commands="[
                \"sed -i 's/:latest/:$TAG/g' /home/ec2-user/docker-compose.yml\",
                \"docker compose -f /home/ec2-user/docker-compose.yml pull\",
                \"docker compose -f /home/ec2-user/docker-compose.yml up -d --remove-orphans\"
              ]" >/dev/null
          done
